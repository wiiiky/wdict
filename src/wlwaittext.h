/* wlwaittext.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __WLWAITTEXT_H__
#define __WLWAITTEXT_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

/*
 * 这个类监听划词动作，可以设置回调函数
 * 监听并不在另外一个线程中执行，而是用了周期性（默认500ms）回调
 */

G_BEGIN_DECLS
#define WL_TYPE_WAIT_TEXT (wl_wait_text_get_type ())
#define WL_WAIT_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WL_TYPE_WAIT_TEXT, WlWaitText))
#define WL_WAIT_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WL_TYPE_WAIT_TEXT, WlWaitTextClass))
#define WL_IS_WAIT_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WL_TYPE_WAIT_TEXT))
#define WL_IS_WAIT_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WL_TYPE_WAIT_TEXT))
#define WL_WAIT_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WL_TYPE_WAIT_TEXT, WlWaitTextClass))
typedef struct _WlWaitText WlWaitText;
typedef struct _WlWaitTextClass WlWaitTextClass;
typedef struct _WlWaitTextPrivate WlWaitTextPrivate;

struct _WlWaitText {
    GObject parent_instance;
    WlWaitTextPrivate *priv;
};

struct _WlWaitTextClass {
    GObjectClass parent_class;
};

typedef void (*WlWaitTextWaitTextCallback) (const gchar * text,
                                            gpointer userData);

GType wl_wait_text_get_type(void) G_GNUC_CONST;
WlWaitText *wl_wait_text_new(void);
WlWaitText *wl_wait_text_construct(GType object_type);
void wl_wait_text_set_callback(WlWaitText * self,
                               WlWaitTextWaitTextCallback callback,
                               gpointer userData);
void wl_wait_text_set_timeout(WlWaitText * self, guint timeout);
void wl_wait_text_startWaiting(WlWaitText * self);
void wl_wait_text_stopWaiting(WlWaitText * self);


G_END_DECLS
#endif
